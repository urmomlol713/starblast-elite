const canvas=document.getElementById("gameCanvas"); const ctx=canvas.getContext("2d"); canvas.width=innerWidth; canvas.height=innerHeight; let keys={},mouse={x:0,y:0,down:false,right:false}; let gems=0,tier=1; let energy=100,energyMax=100,energyRegen=0.2; let shield=100,shieldMax=100,shieldRegen=0.05; let projectiles=[],enemies=[],gemsOnField=[],drones=[],powerUps=[]; let storeOpen=false; class Player{ constructor(){this.x=canvas.width/2;this.y=canvas.height/2;this.angle=0;this.speed=0;this.maxSpeed=4;} update(){ const dx=mouse.x-this.x,dy=mouse.y-this.y; this.angle=Math.atan2(dy,dx); if(mouse.right)this.speed=Math.min(this.speed+0.1,this.maxSpeed);else this.speed*=0.95; this.x+=Math.cos(this.angle)*this.speed; this.y+=Math.sin(this.angle)*this.speed; this.x=Math.max(0,Math.min(canvas.width,this.x)); this.y=Math.max(0,Math.min(canvas.height,this.y)); if(mouse.down&&energy>2){projectiles.push(new Projectile(this.x,this.y,this.angle));energy-=2;} } draw(){ ctx.save(); ctx.translate(this.x,this.y); ctx.rotate(this.angle); ctx.beginPath(); ctx.moveTo(15,0); ctx.lineTo(-10,7); ctx.lineTo(-10,-7); ctx.closePath(); ctx.fillStyle="white"; ctx.fill(); ctx.restore(); } } class Projectile{ constructor(x,y,a){this.x=x;this.y=y;this.a=a;this.speed=8;this.life=100;} update(){this.x+=Math.cos(this.a)*this.speed;this.y+=Math.sin(this.a)*this.speed;this.life--;} draw(){ctx.strokeStyle="lime";ctx.beginPath();ctx.moveTo(this.x,this.y);ctx.lineTo(this.x-Math.cos(this.a)*5,this.y-Math.sin(this.a)*5);ctx.stroke();} } class Enemy{ constructor(){this.x=Math.random()*canvas.width;this.y=Math.random()*canvas.height;this.hp=30*tier;this.speed=1+Math.random()*tier;} update(){ const dx=player.x-this.x,dy=player.y-this.y,d=Math.hypot(dx,dy); this.x+=dx/d*this.speed;this.y+=dy/d*this.speed; for(let p of projectiles){if(Math.hypot(p.x-this.x,p.y-this.y)<10){this.hp-=10*tier;p.life=0;}} if(this.hp<=0){gemsOnField.push(new Gem(this.x,this.y));enemies.splice(enemies.indexOf(this),1);} } draw(){ctx.fillStyle="red";ctx.beginPath();ctx.arc(this.x,this.y,10,0,Math.PI*2);ctx.fill();} } class Gem{ constructor(x,y){this.x=x;this.y=y;this.life=600;} update(){this.life--;if(this.life<=0)gemsOnField.splice(gemsOnField.indexOf(this),1);} draw(){ctx.fillStyle="aqua";ctx.beginPath();ctx.arc(this.x,this.y,5,0,Math.PI*2);ctx.fill();} } class Drone{ constructor(type){this.type=type;this.angle=Math.random()*Math.PI*2;} update(i){ this.angle+=0.02; const r=40; this.x=player.x+Math.cos(this.angle+i)*r; this.y=player.y+Math.sin(this.angle+i)*r; if(this.type==="attack"&&Math.random()<0.02&&enemies.length>0){ const e=enemies[Math.floor(Math.random()*enemies.length)]; projectiles.push(new Projectile(this.x,this.y,Math.atan2(e.y-this.y,e.x-this.x))); } } draw(){ctx.fillStyle=this.type==="attack"?"orange":this.type==="defense"?"cyan":"yellow";ctx.beginPath();ctx.arc(this.x,this.y,5,0,Math.PI*2);ctx.fill();} } const player=new Player(); for(let i=0;i<6;i++)enemies.push(new Enemy()); function update(){ if(!storeOpen){ player.update(); energy=Math.min(energyMax,energy+energyRegen); shield=Math.min(shieldMax,shield+shieldRegen); projectiles.forEach(p=>p.update()); projectiles=projectiles.filter(p=>p.life>0); enemies.forEach(e=>e.update()); if(enemies.length<6&&Math.random()<0.01)enemies.push(new Enemy()); gemsOnField.forEach(g=>g.update()); drones.forEach((d,i)=>d.update(i)); for(let g of gemsOnField){if(Math.hypot(g.x-player.x,g.y-player.y)<15){gems+=5;gemsOnField.splice(gemsOnField.indexOf(g),1);}} } } function draw(){ ctx.clearRect(0,0,canvas.width,canvas.height); player.draw(); projectiles.forEach(p=>p.draw()); enemies.forEach(e=>e.draw()); gemsOnField.forEach(g=>g.draw()); drones.forEach(d=>d.draw()); } function hud(){ document.getElementById("energyFill").style.width=(energy/energyMax*100)+"%"; document.getElementById("shieldFill").style.width=(shield/shieldMax*100)+"%"; document.getElementById("gemCount").textContent="ðŸ’Ž "+gems; } function loop(){update();draw();hud();requestAnimationFrame(loop);} loop(); canvas.addEventListener("mousemove",e=>{mouse.x=e.clientX;mouse.y=e.clientY;}); canvas.addEventListener("mousedown",e=>{if(e.button===0)mouse.down=true;if(e.button===2)mouse.right=true;}); canvas.addEventListener("mouseup",e=>{if(e.button===0)mouse.down=false;if(e.button===2)mouse.right=false;}); canvas.addEventListener("contextmenu",e=>e.preventDefault()); window.addEventListener("keydown",e=>{ if(e.key==="b"||e.key==="B"){storeOpen=!storeOpen;document.getElementById("store").classList.toggle("hidden",!storeOpen);} if(e.key==="r"||e.key==="R")location.reload(); }); document.getElementById("buyAttackDrone").onclick=()=>{if(gems>=50){gems-=50;drones.push(new Drone("attack"));}}; document.getElementById("buyDefenseDrone").onclick=()=>{if(gems>=50){gems-=50;drones.push(new Drone("defense"));}}; document.getElementById("buyMiningDrone").onclick=()=>{if(gems>=50){gems-=50;drones.push(new Drone("mining"));}}; document.getElementById("upgradeTier").onclick=()=>{ if(gems>=200){gems-=200;tier++;energyMax*=2;energyRegen*=2;shieldMax*=2;shieldRegen*=2;} }; document.getElementById("closeStore").onclick=()=>{storeOpen=false;document.getElementById("store").classList.add("hidden");};
